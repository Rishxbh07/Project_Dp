-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.achievements (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  name text NOT NULL UNIQUE,
  description text NOT NULL,
  icon_name text,
  reward_coins integer DEFAULT 0,
  CONSTRAINT achievements_pkey PRIMARY KEY (id)
);
CREATE TABLE public.admins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  role USER-DEFINED NOT NULL DEFAULT 'moderator'::admin_role,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT admins_pkey PRIMARY KEY (id),
  CONSTRAINT admins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.bookings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  listing_id uuid NOT NULL,
  user_id uuid NOT NULL,
  status text NOT NULL DEFAULT 'active'::text,
  service_rating integer CHECK (service_rating >= 1 AND service_rating <= 5),
  joined_at timestamp with time zone NOT NULL DEFAULT now(),
  ended_at timestamp with time zone,
  paid_until date,
  CONSTRAINT bookings_pkey PRIMARY KEY (id),
  CONSTRAINT bookings_listing_id_fkey FOREIGN KEY (listing_id) REFERENCES public.listings(id),
  CONSTRAINT bookings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.credit_ledger (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  booking_id uuid,
  amount numeric NOT NULL,
  type text NOT NULL,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT credit_ledger_pkey PRIMARY KEY (id),
  CONSTRAINT credit_ledger_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.credit_wallets (
  user_id uuid NOT NULL,
  credit_balance numeric NOT NULL DEFAULT 0.00 CHECK (credit_balance >= 0::numeric),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT credit_wallets_pkey PRIMARY KEY (user_id),
  CONSTRAINT credit_wallets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.disputes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  transaction_id uuid NOT NULL UNIQUE,
  booking_id uuid NOT NULL,
  user_id uuid NOT NULL,
  host_id uuid NOT NULL,
  reason text NOT NULL,
  notes text,
  status USER-DEFINED NOT NULL DEFAULT 'open'::dispute_status,
  resolved_by_admin_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone,
  CONSTRAINT disputes_pkey PRIMARY KEY (id),
  CONSTRAINT disputes_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.transactions(id),
  CONSTRAINT disputes_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(id),
  CONSTRAINT disputes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT disputes_host_id_fkey FOREIGN KEY (host_id) REFERENCES public.profiles(id),
  CONSTRAINT disputes_resolved_by_admin_id_fkey FOREIGN KEY (resolved_by_admin_id) REFERENCES public.admins(user_id)
);
CREATE TABLE public.listings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  host_id uuid NOT NULL,
  service_id text NOT NULL,
  is_dapbuddy_plan boolean NOT NULL DEFAULT false,
  alias_name text,
  seats_total integer NOT NULL,
  seats_available integer NOT NULL,
  status USER-DEFINED NOT NULL DEFAULT 'active'::listing_status,
  price_override numeric CHECK (price_override > 0::numeric),
  is_public boolean NOT NULL DEFAULT true,
  plan_purchased_date date,
  total_rating integer NOT NULL DEFAULT 0,
  rating_count integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone,
  CONSTRAINT listings_pkey PRIMARY KEY (id),
  CONSTRAINT listings_host_id_fkey FOREIGN KEY (host_id) REFERENCES public.profiles(id),
  CONSTRAINT listings_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username text NOT NULL UNIQUE,
  pfp_url text,
  host_rating numeric NOT NULL DEFAULT 0,
  loyalty_score integer NOT NULL DEFAULT 0,
  host_tier USER-DEFINED NOT NULL DEFAULT 'standard'::host_tier,
  tags ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.services (
  id text NOT NULL,
  name text NOT NULL UNIQUE,
  category text,
  is_active boolean NOT NULL DEFAULT true,
  base_price numeric NOT NULL CHECK (base_price >= 0::numeric),
  solo_plan_price numeric,
  platform_commission_rate numeric NOT NULL DEFAULT 10.0 CHECK (platform_commission_rate >= 0::numeric),
  tax_range jsonb NOT NULL DEFAULT '[0, 7, 12, 18]'::jsonb,
  max_seats_allowed integer NOT NULL CHECK (max_seats_allowed > 0),
  seats_allowed_to_sell integer NOT NULL CHECK (seats_allowed_to_sell > 0),
  has_manager_seat boolean NOT NULL DEFAULT false,
  sharing_policy USER-DEFINED NOT NULL DEFAULT 'allowed'::sharing_policy_enum,
  sharing_method USER-DEFINED,
  invite_link_expiration boolean,
  billing_cycle_days integer NOT NULL DEFAULT 30,
  payout_schedule_days integer NOT NULL DEFAULT 31,
  host_config jsonb,
  user_config jsonb,
  service_metadata jsonb,
  internal_notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT services_pkey PRIMARY KEY (id)
);
CREATE TABLE public.transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  booking_id uuid NOT NULL,
  user_id uuid NOT NULL,
  host_id uuid NOT NULL,
  gateway_order_id text,
  gateway_payment_id text,
  amount_details jsonb,
  billing_type USER-DEFINED NOT NULL,
  status USER-DEFINED NOT NULL DEFAULT 'completed'::payment_status,
  payout_status USER-DEFINED NOT NULL DEFAULT 'held_by_platform'::payout_status,
  payout_due_date timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT transactions_pkey PRIMARY KEY (id),
  CONSTRAINT transactions_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(id),
  CONSTRAINT transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT transactions_host_id_fkey FOREIGN KEY (host_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_achievements (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  achievement_id bigint NOT NULL,
  unlocked_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_achievements_pkey PRIMARY KEY (id),
  CONSTRAINT user_achievements_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_achievements_achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(id)
);